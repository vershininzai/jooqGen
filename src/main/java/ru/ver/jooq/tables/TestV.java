/*
 * This file is generated by jOOQ.
 */
package ru.ver.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.ver.jooq.Public;
import ru.ver.jooq.tables.records.TestVRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestV extends TableImpl<TestVRecord> {

    private static final long serialVersionUID = -1349165469;

    /**
     * The reference instance of <code>public.test_v</code>
     */
    public static final TestV TEST_V = new TestV();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestVRecord> getRecordType() {
        return TestVRecord.class;
    }

    /**
     * The column <code>public.test_v.id</code>.
     */
    public final TableField<TestVRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.test_v.code</code>.
     */
    public final TableField<TestVRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.test_v.name</code>.
     */
    public final TableField<TestVRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<TestVRecord, Object> COORDINATES = createField(DSL.name("coordinates"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "");

    /**
     * Create a <code>public.test_v</code> table reference
     */
    public TestV() {
        this(DSL.name("test_v"), null);
    }

    /**
     * Create an aliased <code>public.test_v</code> table reference
     */
    public TestV(String alias) {
        this(DSL.name(alias), TEST_V);
    }

    /**
     * Create an aliased <code>public.test_v</code> table reference
     */
    public TestV(Name alias) {
        this(alias, TEST_V);
    }

    private TestV(Name alias, Table<TestVRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestV(Name alias, Table<TestVRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"test_v\" as  SELECT t.id,\n    t.code,\n    t.name,\n    t.coordinates\n   FROM test t\n  WHERE st_intersects(geography(st_geomfromgeojson('{\"type\":\"Polygon\",\"coordinates\":[[[0.0,0.0],[0.0,5.0],[5.0,5.0],[5.0,0.0],[0.0,0.0]]]}'::text)), (t.coordinates)::geography);"));
    }

    public <O extends Record> TestV(Table<O> child, ForeignKey<O, TestVRecord> key) {
        super(child, key, TEST_V);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public TestV as(String alias) {
        return new TestV(DSL.name(alias), this);
    }

    @Override
    public TestV as(Name alias) {
        return new TestV(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestV rename(String name) {
        return new TestV(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestV rename(Name name) {
        return new TestV(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Object> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
